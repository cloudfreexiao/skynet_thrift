--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--



local Thrift = require 'Thrift' 
 
local ttype = Thrift.ttype 
local terror = Thrift.terror 
local ttable_size = Thrift.ttable_size 
local TType = Thrift.TType 
local TMessageType = Thrift.TMessageType 
local __TObject = Thrift. __TObject 
local thrift_print_r = Thrift.thrift_print_r 
local TException = Thrift.TException 
local TApplicationException = Thrift.TApplicationException 
local __TClient = Thrift.__TClient 
local __TProcessor= Thrift.__TProcessor


local hbase_ttypes = require 'hbase_ttypes' 
local TTimeRange =  hbase_ttypes.TTimeRange
local TColumn= hbase_ttypes.TColumn
local TColumnValue=  hbase_ttypes.TColumnValue
local TColumnIncrement = hbase_ttypes.TColumnIncrement
local TResult = hbase_ttypes.TResult
local TAuthorization= hbase_ttypes.TAuthorization
local TCellVisibility= hbase_ttypes.TCellVisibility
local TGet= hbase_ttypes.TGet
local TPut= hbase_ttypes.TPut
local TDelete= hbase_ttypes.TDelete
local TIncrement= hbase_ttypes.TIncrement
local TAppend= hbase_ttypes.TAppend
local TScan= hbase_ttypes.TScan
local TMutation= hbase_ttypes.TMutation
local TRowMutations= hbase_ttypes.TRowMutations
local TIOError= hbase_ttypes.TIOError
local TIllegalArgument= hbase_ttypes.TIllegalArgument

-- HELPER FUNCTIONS AND STRUCTURES

local exists_args = __TObject:new{
  table = nil,
  get = nil
}

function exists_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.get = TGet:new{}
        self.get:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function exists_args:write(oprot)
  oprot:writeStructBegin('exists_args')
  if self.table ~= nil then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.get ~= nil then
    oprot:writeFieldBegin('get', TType.STRUCT, 2)
    self.get:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local exists_result = __TObject:new{
  success = nil,
  io = nil
}

function exists_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function exists_result:write(oprot)
  oprot:writeStructBegin('exists_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  if self.io ~= nil then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local get_args = __TObject:new{
  table = nil,
  get = nil
}

function get_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.get = TGet:new{}
        self.get:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function get_args:write(oprot)
  oprot:writeStructBegin('get_args')
  if self.table ~= nil then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.get ~= nil then
    oprot:writeFieldBegin('get', TType.STRUCT, 2)
    self.get:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local get_result = __TObject:new{
  success = nil,
  io = nil
}

function get_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = TResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function get_result:write(oprot)
  oprot:writeStructBegin('get_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.io ~= nil then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getMultiple_args = __TObject:new{
  table = nil,
  gets = nil
}

function getMultiple_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.gets = {}
        local _etype105, _size102 = iprot:readListBegin()
        for _i=1,_size102 do
          local _elem106 = TGet:new{}
          _elem106:read(iprot)
          table.insert(self.gets, _elem106)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getMultiple_args:write(oprot)
  oprot:writeStructBegin('getMultiple_args')
  if self.table ~= nil then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.gets ~= nil then
    oprot:writeFieldBegin('gets', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.gets)
    for _,iter107 in ipairs(self.gets) do
      iter107:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getMultiple_result = __TObject:new{
  success = nil,
  io = nil
}

function getMultiple_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype111, _size108 = iprot:readListBegin()
        for _i=1,_size108 do
          local _elem112 = TResult:new{}
          _elem112:read(iprot)
          table.insert(self.success, _elem112)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getMultiple_result:write(oprot)
  oprot:writeStructBegin('getMultiple_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter113 in ipairs(self.success) do
      iter113:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.io ~= nil then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local put_args = __TObject:new{
  table = nil,
  put = nil 
}

function put_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.put = TPut:new{}
        self.put:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function put_args:write(oprot)
  oprot:writeStructBegin('put_args')
  if self.table ~= nil then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.put ~= nil then
    oprot:writeFieldBegin('put', TType.STRUCT, 2)
    self.put:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local put_result = __TObject:new{
  io = nil
}

function put_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function put_result:write(oprot)
  oprot:writeStructBegin('put_result')
  if self.io ~= nil then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local checkAndPut_args = __TObject:new{
  table = nil ,
  row = nil,
  family = nil ,
  qualifier = nil ,
  value = nil ,
  put = nil
}

function checkAndPut_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.row = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.family = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.qualifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.value = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRUCT then
        self.put = TPut:new{}
        self.put:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function checkAndPut_args:write(oprot)
  oprot:writeStructBegin('checkAndPut_args')
  if self.table ~= nil then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.row ~= nil then
    oprot:writeFieldBegin('row', TType.STRING, 2)
    oprot:writeString(self.row)
    oprot:writeFieldEnd()
  end
  if self.family ~= nil then
    oprot:writeFieldBegin('family', TType.STRING, 3)
    oprot:writeString(self.family)
    oprot:writeFieldEnd()
  end
  if self.qualifier ~= nil then
    oprot:writeFieldBegin('qualifier', TType.STRING, 4)
    oprot:writeString(self.qualifier)
    oprot:writeFieldEnd()
  end
  if self.value ~= nil then
    oprot:writeFieldBegin('value', TType.STRING, 5)
    oprot:writeString(self.value)
    oprot:writeFieldEnd()
  end
  if self.put ~= nil then
    oprot:writeFieldBegin('put', TType.STRUCT, 6)
    self.put:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local checkAndPut_result = __TObject:new{
  success = nil,
  io = nil
}

function checkAndPut_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function checkAndPut_result:write(oprot)
  oprot:writeStructBegin('checkAndPut_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  if self.io ~= nil then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local putMultiple_args = __TObject:new{
  table = nil,
  puts = nil
}

function putMultiple_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.puts = {}
        local _etype117, _size114 = iprot:readListBegin()
        for _i=1,_size114 do
          local _elem118 = TPut:new{}
          _elem118:read(iprot)
          table.insert(self.puts, _elem118)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function putMultiple_args:write(oprot)
  oprot:writeStructBegin('putMultiple_args')
  if self.table ~= nil then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.puts ~= nil then
    oprot:writeFieldBegin('puts', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.puts)
    for _,iter119 in ipairs(self.puts) do
      iter119:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local putMultiple_result = __TObject:new{
  io = nil
}

function putMultiple_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function putMultiple_result:write(oprot)
  oprot:writeStructBegin('putMultiple_result')
  if self.io ~= nil then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local deleteSingle_args = __TObject:new{
  table = nil,
  deleteSingle = nil
}

function deleteSingle_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.deleteSingle = TDelete:new{}
        self.deleteSingle:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function deleteSingle_args:write(oprot)
  oprot:writeStructBegin('deleteSingle_args')
  if self.table ~= nil then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.deleteSingle ~= nil then
    oprot:writeFieldBegin('deleteSingle', TType.STRUCT, 2)
    self.deleteSingle:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local deleteSingle_result = __TObject:new{
  io = nil
}

function deleteSingle_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function deleteSingle_result:write(oprot)
  oprot:writeStructBegin('deleteSingle_result')
  if self.io ~= nil then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local deleteMultiple_args = __TObject:new{
  table = nil,
  deletes = nil
}

function deleteMultiple_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.deletes = {}
        local _etype123, _size120 = iprot:readListBegin()
        for _i=1,_size120 do
          local _elem124 = TDelete:new{}
          _elem124:read(iprot)
          table.insert(self.deletes, _elem124)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function deleteMultiple_args:write(oprot)
  oprot:writeStructBegin('deleteMultiple_args')
  if self.table ~= nil then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.deletes ~= nil then
    oprot:writeFieldBegin('deletes', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.deletes)
    for _,iter125 in ipairs(self.deletes) do
      iter125:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local deleteMultiple_result = __TObject:new{
  success = nil,
  io = nil
}

function deleteMultiple_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype129, _size126 = iprot:readListBegin()
        for _i=1,_size126 do
          local _elem130 = TDelete:new{}
          _elem130:read(iprot)
          table.insert(self.success, _elem130)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function deleteMultiple_result:write(oprot)
  oprot:writeStructBegin('deleteMultiple_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter131 in ipairs(self.success) do
      iter131:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.io ~= nil then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local checkAndDelete_args = __TObject:new{
  table = nil,
  row = nil,
  family = nil ,
  qualifier = nil ,
  value = nil,
  deleteSingle = nil
}

function checkAndDelete_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.row = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.family = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.qualifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.value = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRUCT then
        self.deleteSingle = TDelete:new{}
        self.deleteSingle:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function checkAndDelete_args:write(oprot)
  oprot:writeStructBegin('checkAndDelete_args')
  if self.table ~= nil then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.row ~= nil then
    oprot:writeFieldBegin('row', TType.STRING, 2)
    oprot:writeString(self.row)
    oprot:writeFieldEnd()
  end
  if self.family ~= nil then
    oprot:writeFieldBegin('family', TType.STRING, 3)
    oprot:writeString(self.family)
    oprot:writeFieldEnd()
  end
  if self.qualifier ~= nil then
    oprot:writeFieldBegin('qualifier', TType.STRING, 4)
    oprot:writeString(self.qualifier)
    oprot:writeFieldEnd()
  end
  if self.value ~= nil then
    oprot:writeFieldBegin('value', TType.STRING, 5)
    oprot:writeString(self.value)
    oprot:writeFieldEnd()
  end
  if self.deleteSingle ~= nil then
    oprot:writeFieldBegin('deleteSingle', TType.STRUCT, 6)
    self.deleteSingle:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local checkAndDelete_result = __TObject:new{
  success = nil,
  io = nil
}

function checkAndDelete_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function checkAndDelete_result:write(oprot)
  oprot:writeStructBegin('checkAndDelete_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  if self.io ~= nil then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local increment_args = __TObject:new{
  table = nil,
  increment = nil
}

function increment_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.increment = TIncrement:new{}
        self.increment:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function increment_args:write(oprot)
  oprot:writeStructBegin('increment_args')
  if self.table ~= nil then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.increment ~= nil then
    oprot:writeFieldBegin('increment', TType.STRUCT, 2)
    self.increment:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local increment_result = __TObject:new{
  success = nil,
  io = nil
}

function increment_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = TResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function increment_result:write(oprot)
  oprot:writeStructBegin('increment_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.io ~= nil then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local append_args = __TObject:new{
  table = nil,
  append = nil
}

function append_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.append = TAppend:new{}
        self.append:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function append_args:write(oprot)
  oprot:writeStructBegin('append_args')
  if self.table ~= nil then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.append ~= nil then
    oprot:writeFieldBegin('append', TType.STRUCT, 2)
    self.append:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local append_result = __TObject:new{
  success = nil,
  io = nil
}

function append_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = TResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function append_result:write(oprot)
  oprot:writeStructBegin('append_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.io ~= nil then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local openScanner_args = __TObject:new{
  table = nil ,
  scan = nil
}

function openScanner_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.scan = TScan:new{}
        self.scan:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function openScanner_args:write(oprot)
  oprot:writeStructBegin('openScanner_args')
  if self.table ~= nil then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.scan ~= nil then
    oprot:writeFieldBegin('scan', TType.STRUCT, 2)
    self.scan:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local openScanner_result = __TObject:new{
  success = nil,
  io = nil
}

function openScanner_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function openScanner_result:write(oprot)
  oprot:writeStructBegin('openScanner_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.io ~= nil then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getScannerRows_args = __TObject:new{
  scannerId = nil,
  numRows = nil
}

function getScannerRows_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.scannerId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.numRows = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getScannerRows_args:write(oprot)
  oprot:writeStructBegin('getScannerRows_args')
  if self.scannerId ~= nil then
    oprot:writeFieldBegin('scannerId', TType.I32, 1)
    oprot:writeI32(self.scannerId)
    oprot:writeFieldEnd()
  end
  if self.numRows ~= nil then
    oprot:writeFieldBegin('numRows', TType.I32, 2)
    oprot:writeI32(self.numRows)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getScannerRows_result = __TObject:new{
  success = nil,
  io = nil,
  ia = nil
}

function getScannerRows_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype135, _size132 = iprot:readListBegin()
        for _i=1,_size132 do
          local _elem136 = TResult:new{}
          _elem136:read(iprot)
          table.insert(self.success, _elem136)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.ia = TIllegalArgument:new{}
        self.ia:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getScannerRows_result:write(oprot)
  oprot:writeStructBegin('getScannerRows_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter137 in ipairs(self.success) do
      iter137:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.io ~= nil then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.ia ~= nil then
    oprot:writeFieldBegin('ia', TType.STRUCT, 2)
    self.ia:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local closeScanner_args = __TObject:new{
  scannerId = nil
}

function closeScanner_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.scannerId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function closeScanner_args:write(oprot)
  oprot:writeStructBegin('closeScanner_args')
  if self.scannerId ~= nil then
    oprot:writeFieldBegin('scannerId', TType.I32, 1)
    oprot:writeI32(self.scannerId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local closeScanner_result = __TObject:new{
  io = nil,
  ia = nil
}

function closeScanner_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.ia = TIllegalArgument:new{}
        self.ia:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function closeScanner_result:write(oprot)
  oprot:writeStructBegin('closeScanner_result')
  if self.io ~= nil then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.ia ~= nil then
    oprot:writeFieldBegin('ia', TType.STRUCT, 2)
    self.ia:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local mutateRow_args = __TObject:new{
  table = nil,
  rowMutations = nil
}

function mutateRow_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.rowMutations = TRowMutations:new{}
        self.rowMutations:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function mutateRow_args:write(oprot)
  oprot:writeStructBegin('mutateRow_args')
  if self.table ~= nil then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.rowMutations ~= nil then
    oprot:writeFieldBegin('rowMutations', TType.STRUCT, 2)
    self.rowMutations:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local mutateRow_result = __TObject:new{
  io = nil
}

function mutateRow_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function mutateRow_result:write(oprot)
  oprot:writeStructBegin('mutateRow_result')
  if self.io ~= nil then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getScannerResults_args = __TObject:new{
  table = nil,
  scan = nil ,
  numRows = nil
}

function getScannerResults_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.scan = TScan:new{}
        self.scan:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.numRows = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getScannerResults_args:write(oprot)
  oprot:writeStructBegin('getScannerResults_args')
  if self.table ~= nil then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.scan ~= nil then
    oprot:writeFieldBegin('scan', TType.STRUCT, 2)
    self.scan:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.numRows ~= nil then
    oprot:writeFieldBegin('numRows', TType.I32, 3)
    oprot:writeI32(self.numRows)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local getScannerResults_result = __TObject:new{
  success = nil,
  io = nil
}

function getScannerResults_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype141, _size138 = iprot:readListBegin()
        for _i=1,_size138 do
          local _elem142 = TResult:new{}
          _elem142:read(iprot)
          table.insert(self.success, _elem142)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getScannerResults_result:write(oprot)
  oprot:writeStructBegin('getScannerResults_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter143 in ipairs(self.success) do
      iter143:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.io ~= nil then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

local THBaseServiceClient = __TObject.new(__TClient, {
  __type = 'THBaseServiceClient'
})

function THBaseServiceClient:exists(table, get)
  self:send_exists(table, get)
  return self:recv_exists(table, get)
end

function THBaseServiceClient:send_exists(table, get)
  self.oprot:writeMessageBegin('exists', TMessageType.CALL, self._seqid)
  local args = exists_args:new{}
  args.table = table
  args.get = get
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_exists(table, get)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = exists_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:get(table, get)
  self:send_get(table, get)
  return self:recv_get(table, get)
end

function THBaseServiceClient:send_get(table, get)
  self.oprot:writeMessageBegin('get', TMessageType.CALL, self._seqid)
  local args = get_args:new{}
  args.table = table
  args.get = get
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_get(table, get)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = get_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:getMultiple(table, gets)
  self:send_getMultiple(table, gets)
  return self:recv_getMultiple(table, gets)
end

function THBaseServiceClient:send_getMultiple(table, gets)
  self.oprot:writeMessageBegin('getMultiple', TMessageType.CALL, self._seqid)
  local args = getMultiple_args:new{}
  args.table = table
  args.gets = gets
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_getMultiple(table, gets)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getMultiple_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:put(table, put)
  self:send_put(table, put)
  self:recv_put(table, put)
end

function THBaseServiceClient:send_put(table, put)
  self.oprot:writeMessageBegin('put', TMessageType.CALL, self._seqid)
  local args = put_args:new{}
  args.table = table
  args.put = put
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_put(table, put)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = put_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function THBaseServiceClient:checkAndPut(table, row, family, qualifier, value, put)
  self:send_checkAndPut(table, row, family, qualifier, value, put)
  return self:recv_checkAndPut(table, row, family, qualifier, value, put)
end

function THBaseServiceClient:send_checkAndPut(table, row, family, qualifier, value, put)
  self.oprot:writeMessageBegin('checkAndPut', TMessageType.CALL, self._seqid)
  local args = checkAndPut_args:new{}
  args.table = table
  args.row = row
  args.family = family
  args.qualifier = qualifier
  args.value = value
  args.put = put
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_checkAndPut(table, row, family, qualifier, value, put)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = checkAndPut_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:putMultiple(table, puts)
  self:send_putMultiple(table, puts)
  self:recv_putMultiple(table, puts)
end

function THBaseServiceClient:send_putMultiple(table, puts)
  self.oprot:writeMessageBegin('putMultiple', TMessageType.CALL, self._seqid)
  local args = putMultiple_args:new{}
  args.table = table
  args.puts = puts
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_putMultiple(table, puts)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = putMultiple_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function THBaseServiceClient:deleteSingle(table, deleteSingle)
  self:send_deleteSingle(table, deleteSingle)
  self:recv_deleteSingle(table, deleteSingle)
end

function THBaseServiceClient:send_deleteSingle(table, deleteSingle)
  self.oprot:writeMessageBegin('deleteSingle', TMessageType.CALL, self._seqid)
  local args = deleteSingle_args:new{}
  args.table = table
  args.deleteSingle = deleteSingle
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_deleteSingle(table, deleteSingle)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = deleteSingle_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function THBaseServiceClient:deleteMultiple(table, deletes)
  self:send_deleteMultiple(table, deletes)
  return self:recv_deleteMultiple(table, deletes)
end

function THBaseServiceClient:send_deleteMultiple(table, deletes)
  self.oprot:writeMessageBegin('deleteMultiple', TMessageType.CALL, self._seqid)
  local args = deleteMultiple_args:new{}
  args.table = table
  args.deletes = deletes
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_deleteMultiple(table, deletes)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = deleteMultiple_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:checkAndDelete(table, row, family, qualifier, value, deleteSingle)
  self:send_checkAndDelete(table, row, family, qualifier, value, deleteSingle)
  return self:recv_checkAndDelete(table, row, family, qualifier, value, deleteSingle)
end

function THBaseServiceClient:send_checkAndDelete(table, row, family, qualifier, value, deleteSingle)
  self.oprot:writeMessageBegin('checkAndDelete', TMessageType.CALL, self._seqid)
  local args = checkAndDelete_args:new{}
  args.table = table
  args.row = row
  args.family = family
  args.qualifier = qualifier
  args.value = value
  args.deleteSingle = deleteSingle
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_checkAndDelete(table, row, family, qualifier, value, deleteSingle)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = checkAndDelete_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:increment(table, increment)
  self:send_increment(table, increment)
  return self:recv_increment(table, increment)
end

function THBaseServiceClient:send_increment(table, increment)
  self.oprot:writeMessageBegin('increment', TMessageType.CALL, self._seqid)
  local args = increment_args:new{}
  args.table = table
  args.increment = increment
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_increment(table, increment)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = increment_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:append(table, append)
  self:send_append(table, append)
  return self:recv_append(table, append)
end

function THBaseServiceClient:send_append(table, append)
  self.oprot:writeMessageBegin('append', TMessageType.CALL, self._seqid)
  local args = append_args:new{}
  args.table = table
  args.append = append
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_append(table, append)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = append_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:openScanner(table, scan)
  self:send_openScanner(table, scan)
  return self:recv_openScanner(table, scan)
end

function THBaseServiceClient:send_openScanner(table, scan)
  self.oprot:writeMessageBegin('openScanner', TMessageType.CALL, self._seqid)
  local args = openScanner_args:new{}
  args.table = table
  args.scan = scan
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_openScanner(table, scan)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = openScanner_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:getScannerRows(scannerId, numRows)
  self:send_getScannerRows(scannerId, numRows)
  return self:recv_getScannerRows(scannerId, numRows)
end

function THBaseServiceClient:send_getScannerRows(scannerId, numRows)
  self.oprot:writeMessageBegin('getScannerRows', TMessageType.CALL, self._seqid)
  local args = getScannerRows_args:new{}
  args.scannerId = scannerId
  args.numRows = numRows
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_getScannerRows(scannerId, numRows)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getScannerRows_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.io then
    error(result.io)
  elseif result.ia then
    error(result.ia)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:closeScanner(scannerId)
  self:send_closeScanner(scannerId)
  self:recv_closeScanner(scannerId)
end

function THBaseServiceClient:send_closeScanner(scannerId)
  self.oprot:writeMessageBegin('closeScanner', TMessageType.CALL, self._seqid)
  local args = closeScanner_args:new{}
  args.scannerId = scannerId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_closeScanner(scannerId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = closeScanner_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function THBaseServiceClient:mutateRow(table, rowMutations)
  self:send_mutateRow(table, rowMutations)
  self:recv_mutateRow(table, rowMutations)
end

function THBaseServiceClient:send_mutateRow(table, rowMutations)
  self.oprot:writeMessageBegin('mutateRow', TMessageType.CALL, self._seqid)
  local args = mutateRow_args:new{}
  args.table = table
  args.rowMutations = rowMutations
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_mutateRow(table, rowMutations)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = mutateRow_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function THBaseServiceClient:getScannerResults(table, scan, numRows)
  self:send_getScannerResults(table, scan, numRows)
  return self:recv_getScannerResults(table, scan, numRows)
end

function THBaseServiceClient:send_getScannerResults(table, scan, numRows)
  self.oprot:writeMessageBegin('getScannerResults', TMessageType.CALL, self._seqid)
  local args = getScannerResults_args:new{}
  args.table = table
  args.scan = scan
  args.numRows = numRows
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_getScannerResults(table, scan, numRows)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getScannerResults_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
local THBaseServiceIface = __TObject:new{
  __type = 'THBaseServiceIface'
}


local THBaseServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'THBaseServiceProcessor'
})

function THBaseServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    local x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function THBaseServiceProcessor:process_exists(seqid, iprot, oprot, server_ctx)
  local args =exists_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = exists_result:new{}
  local status, res = pcall(self.handler.exists, self.handler, args.table, args.get)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('exists', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_get(seqid, iprot, oprot, server_ctx)
  local args = get_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = get_result:new{}
  local status, res = pcall(self.handler.get, self.handler, args.table, args.get)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('get', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_getMultiple(seqid, iprot, oprot, server_ctx)
  local args = getMultiple_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getMultiple_result:new{}
  local status, res = pcall(self.handler.getMultiple, self.handler, args.table, args.gets)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getMultiple', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_put(seqid, iprot, oprot, server_ctx)
  local args = put_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = put_result:new{}
  local status, res = pcall(self.handler.put, self.handler, args.table, args.put)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('put', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_checkAndPut(seqid, iprot, oprot, server_ctx)
  local args = checkAndPut_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = checkAndPut_result:new{}
  local status, res = pcall(self.handler.checkAndPut, self.handler, args.table, args.row, args.family, args.qualifier, args.value, args.put)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('checkAndPut', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_putMultiple(seqid, iprot, oprot, server_ctx)
  local args = putMultiple_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = putMultiple_result:new{}
  local status, res = pcall(self.handler.putMultiple, self.handler, args.table, args.puts)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('putMultiple', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_deleteSingle(seqid, iprot, oprot, server_ctx)
  local args = deleteSingle_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = deleteSingle_result:new{}
  local status, res = pcall(self.handler.deleteSingle, self.handler, args.table, args.deleteSingle)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('deleteSingle', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_deleteMultiple(seqid, iprot, oprot, server_ctx)
  local args = deleteMultiple_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = deleteMultiple_result:new{}
  local status, res = pcall(self.handler.deleteMultiple, self.handler, args.table, args.deletes)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('deleteMultiple', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_checkAndDelete(seqid, iprot, oprot, server_ctx)
  local args = checkAndDelete_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = checkAndDelete_result:new{}
  local status, res = pcall(self.handler.checkAndDelete, self.handler, args.table, args.row, args.family, args.qualifier, args.value, args.deleteSingle)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('checkAndDelete', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_increment(seqid, iprot, oprot, server_ctx)
  local args = increment_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = increment_result:new{}
  local status, res = pcall(self.handler.increment, self.handler, args.table, args.increment)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('increment', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_append(seqid, iprot, oprot, server_ctx)
  local args = append_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = append_result:new{}
  local status, res = pcall(self.handler.append, self.handler, args.table, args.append)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('append', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_openScanner(seqid, iprot, oprot, server_ctx)
  local args = openScanner_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = openScanner_result:new{}
  local status, res = pcall(self.handler.openScanner, self.handler, args.table, args.scan)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('openScanner', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_getScannerRows(seqid, iprot, oprot, server_ctx)
  local args = getScannerRows_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getScannerRows_result:new{}
  local status, res = pcall(self.handler.getScannerRows, self.handler, args.scannerId, args.numRows)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  elseif ttype(res) == 'TIllegalArgument' then
    result.ia = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getScannerRows', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_closeScanner(seqid, iprot, oprot, server_ctx)
  local args = closeScanner_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = closeScanner_result:new{}
  local status, res = pcall(self.handler.closeScanner, self.handler, args.scannerId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  elseif ttype(res) == 'TIllegalArgument' then
    result.ia = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('closeScanner', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_mutateRow(seqid, iprot, oprot, server_ctx)
  local args = mutateRow_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = mutateRow_result:new{}
  local status, res = pcall(self.handler.mutateRow, self.handler, args.table, args.rowMutations)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('mutateRow', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_getScannerResults(seqid, iprot, oprot, server_ctx)
  local args = getScannerResults_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getScannerResults_result:new{}
  local status, res = pcall(self.handler.getScannerResults, self.handler, args.table, args.scan, args.numRows)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getScannerResults', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

local _M = {
append_args = append_args,
append_result =append_result,
checkAndDelete_args = checkAndDelete_args,
checkAndDelete_result = checkAndDelete_result,
checkAndPut_args = checkAndPut_args,
checkAndPut_result = checkAndPut_result,
closeScanner_args = closeScanner_args,
closeScanner_result = closeScanner_result,
deleteMultiple_args = deleteMultiple_args,
deleteMultiple_result = deleteMultiple_result,
deleteSingle_args = deleteSingle_args,
deleteSingle_result = deleteSingle_result,
exists_args = exists_args,
exists_result = exists_result,
get_args = get_args,
getMultiple_args = getMultiple_args,
getMultiple_result = getMultiple_result,
get_result = get_result,
getScannerResults_args = getScannerResults_args,
getScannerResults_result = getScannerResults_result,
getScannerRows_args = getScannerRows_args,
getScannerRows_result = getScannerRows_result,
increment_args = increment_args,
increment_result = increment_result,
mutateRow_args = mutateRow_args,
mutateRow_result = mutateRow_result,
openScanner_args = openScanner_args,
openScanner_result = openScanner_result,
put_args = put_args,
putMultiple_args = putMultiple_args,
putMultiple_result = putMultiple_result,
put_result = put_result,
THBaseServiceClient = THBaseServiceClient,
THBaseServiceProcessor = THBaseServiceProcessor
}
return _M
