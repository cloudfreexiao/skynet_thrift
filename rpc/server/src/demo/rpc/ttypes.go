// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rpc

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type ArgStruct struct {
	ArgByte   int8    `thrift:"argByte,1" json:"argByte"`
	ArgString string  `thrift:"argString,2" json:"argString"`
	ArgI16    int16   `thrift:"argI16,3" json:"argI16"`
	ArgI32    int32   `thrift:"argI32,4" json:"argI32"`
	ArgI64    int64   `thrift:"argI64,5" json:"argI64"`
	ArgDouble float64 `thrift:"argDouble,6" json:"argDouble"`
	ArgBool   bool    `thrift:"argBool,7" json:"argBool"`
}

func NewArgStruct() *ArgStruct {
	return &ArgStruct{}
}

func (p *ArgStruct) GetArgByte() int8 {
	return p.ArgByte
}

func (p *ArgStruct) GetArgString() string {
	return p.ArgString
}

func (p *ArgStruct) GetArgI16() int16 {
	return p.ArgI16
}

func (p *ArgStruct) GetArgI32() int32 {
	return p.ArgI32
}

func (p *ArgStruct) GetArgI64() int64 {
	return p.ArgI64
}

func (p *ArgStruct) GetArgDouble() float64 {
	return p.ArgDouble
}

func (p *ArgStruct) GetArgBool() bool {
	return p.ArgBool
}
func (p *ArgStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ArgStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := int8(v)
		p.ArgByte = temp
	}
	return nil
}

func (p *ArgStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ArgString = v
	}
	return nil
}

func (p *ArgStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ArgI16 = v
	}
	return nil
}

func (p *ArgStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ArgI32 = v
	}
	return nil
}

func (p *ArgStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ArgI64 = v
	}
	return nil
}

func (p *ArgStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.ArgDouble = v
	}
	return nil
}

func (p *ArgStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.ArgBool = v
	}
	return nil
}

func (p *ArgStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ArgStruct"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ArgStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argByte", thrift.BYTE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:argByte: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.ArgByte)); err != nil {
		return fmt.Errorf("%T.argByte (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:argByte: %s", p, err)
	}
	return err
}

func (p *ArgStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argString", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:argString: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ArgString)); err != nil {
		return fmt.Errorf("%T.argString (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:argString: %s", p, err)
	}
	return err
}

func (p *ArgStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argI16", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:argI16: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.ArgI16)); err != nil {
		return fmt.Errorf("%T.argI16 (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:argI16: %s", p, err)
	}
	return err
}

func (p *ArgStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argI32", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:argI32: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ArgI32)); err != nil {
		return fmt.Errorf("%T.argI32 (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:argI32: %s", p, err)
	}
	return err
}

func (p *ArgStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argI64", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:argI64: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ArgI64)); err != nil {
		return fmt.Errorf("%T.argI64 (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:argI64: %s", p, err)
	}
	return err
}

func (p *ArgStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argDouble", thrift.DOUBLE, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:argDouble: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.ArgDouble)); err != nil {
		return fmt.Errorf("%T.argDouble (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:argDouble: %s", p, err)
	}
	return err
}

func (p *ArgStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argBool", thrift.BOOL, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:argBool: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.ArgBool)); err != nil {
		return fmt.Errorf("%T.argBool (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:argBool: %s", p, err)
	}
	return err
}

func (p *ArgStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArgStruct(%+v)", *p)
}
