// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rpc

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type RpcService interface {
	// Parameters:
	//  - ArgStruct
	//  - ArgByte
	//  - ArgI16
	//  - ArgI32
	//  - ArgI64
	//  - ArgDouble
	//  - ArgString
	//  - ParamMapStrStr
	//  - ParamMapI32Str
	//  - ParamSetStr
	//  - ParamSetI64
	//  - ParamListStr
	//  - ArgBool
	FunCall(argStruct *ArgStruct, argByte int8, argI16 int16, argI32 int32, argI64 int64, argDouble float64, argString string, paramMapStrStr map[string]string, paramMapI32Str map[int32]string, paramSetStr map[string]bool, paramSetI64 map[int64]bool, paramListStr []string, argBool bool) (r []string, err error)
}

type RpcServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewRpcServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RpcServiceClient {
	return &RpcServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewRpcServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RpcServiceClient {
	return &RpcServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - ArgStruct
//  - ArgByte
//  - ArgI16
//  - ArgI32
//  - ArgI64
//  - ArgDouble
//  - ArgString
//  - ParamMapStrStr
//  - ParamMapI32Str
//  - ParamSetStr
//  - ParamSetI64
//  - ParamListStr
//  - ArgBool
func (p *RpcServiceClient) FunCall(argStruct *ArgStruct, argByte int8, argI16 int16, argI32 int32, argI64 int64, argDouble float64, argString string, paramMapStrStr map[string]string, paramMapI32Str map[int32]string, paramSetStr map[string]bool, paramSetI64 map[int64]bool, paramListStr []string, argBool bool) (r []string, err error) {
	if err = p.sendFunCall(argStruct, argByte, argI16, argI32, argI64, argDouble, argString, paramMapStrStr, paramMapI32Str, paramSetStr, paramSetI64, paramListStr, argBool); err != nil {
		return
	}
	return p.recvFunCall()
}

func (p *RpcServiceClient) sendFunCall(argStruct *ArgStruct, argByte int8, argI16 int16, argI32 int32, argI64 int64, argDouble float64, argString string, paramMapStrStr map[string]string, paramMapI32Str map[int32]string, paramSetStr map[string]bool, paramSetI64 map[int64]bool, paramListStr []string, argBool bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("funCall", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FunCallArgs{
		ArgStruct:      argStruct,
		ArgByte:        argByte,
		ArgI16:         argI16,
		ArgI32:         argI32,
		ArgI64:         argI64,
		ArgDouble:      argDouble,
		ArgString:      argString,
		ParamMapStrStr: paramMapStrStr,
		ParamMapI32Str: paramMapI32Str,
		ParamSetStr:    paramSetStr,
		ParamSetI64:    paramSetI64,
		ParamListStr:   paramListStr,
		ArgBool:        argBool,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RpcServiceClient) recvFunCall() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "funCall failed: out of sequence response")
		return
	}
	result := FunCallResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type RpcServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      RpcService
}

func (p *RpcServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *RpcServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *RpcServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewRpcServiceProcessor(handler RpcService) *RpcServiceProcessor {

	self2 := &RpcServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self2.processorMap["funCall"] = &rpcServiceProcessorFunCall{handler: handler}
	return self2
}

func (p *RpcServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x3.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x3

}

type rpcServiceProcessorFunCall struct {
	handler RpcService
}

func (p *rpcServiceProcessorFunCall) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FunCallArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("funCall", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FunCallResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.FunCall(args.ArgStruct, args.ArgByte, args.ArgI16, args.ArgI32, args.ArgI64, args.ArgDouble, args.ArgString, args.ParamMapStrStr, args.ParamMapI32Str, args.ParamSetStr, args.ParamSetI64, args.ParamListStr, args.ArgBool); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing funCall: "+err2.Error())
		oprot.WriteMessageBegin("funCall", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("funCall", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type FunCallArgs struct {
	ArgStruct      *ArgStruct        `thrift:"argStruct,1" json:"argStruct"`
	ArgByte        int8              `thrift:"argByte,2" json:"argByte"`
	ArgI16         int16             `thrift:"argI16,3" json:"argI16"`
	ArgI32         int32             `thrift:"argI32,4" json:"argI32"`
	ArgI64         int64             `thrift:"argI64,5" json:"argI64"`
	ArgDouble      float64           `thrift:"argDouble,6" json:"argDouble"`
	ArgString      string            `thrift:"argString,7" json:"argString"`
	ParamMapStrStr map[string]string `thrift:"paramMapStrStr,8" json:"paramMapStrStr"`
	ParamMapI32Str map[int32]string  `thrift:"paramMapI32Str,9" json:"paramMapI32Str"`
	ParamSetStr    map[string]bool   `thrift:"paramSetStr,10" json:"paramSetStr"`
	ParamSetI64    map[int64]bool    `thrift:"paramSetI64,11" json:"paramSetI64"`
	ParamListStr   []string          `thrift:"paramListStr,12" json:"paramListStr"`
	ArgBool        bool              `thrift:"argBool,13" json:"argBool"`
}

func NewFunCallArgs() *FunCallArgs {
	return &FunCallArgs{}
}

var FunCallArgs_ArgStruct_DEFAULT *ArgStruct

func (p *FunCallArgs) GetArgStruct() *ArgStruct {
	if !p.IsSetArgStruct() {
		return FunCallArgs_ArgStruct_DEFAULT
	}
	return p.ArgStruct
}

func (p *FunCallArgs) GetArgByte() int8 {
	return p.ArgByte
}

func (p *FunCallArgs) GetArgI16() int16 {
	return p.ArgI16
}

func (p *FunCallArgs) GetArgI32() int32 {
	return p.ArgI32
}

func (p *FunCallArgs) GetArgI64() int64 {
	return p.ArgI64
}

func (p *FunCallArgs) GetArgDouble() float64 {
	return p.ArgDouble
}

func (p *FunCallArgs) GetArgString() string {
	return p.ArgString
}

func (p *FunCallArgs) GetParamMapStrStr() map[string]string {
	return p.ParamMapStrStr
}

func (p *FunCallArgs) GetParamMapI32Str() map[int32]string {
	return p.ParamMapI32Str
}

func (p *FunCallArgs) GetParamSetStr() map[string]bool {
	return p.ParamSetStr
}

func (p *FunCallArgs) GetParamSetI64() map[int64]bool {
	return p.ParamSetI64
}

func (p *FunCallArgs) GetParamListStr() []string {
	return p.ParamListStr
}

func (p *FunCallArgs) GetArgBool() bool {
	return p.ArgBool
}
func (p *FunCallArgs) IsSetArgStruct() bool {
	return p.ArgStruct != nil
}

func (p *FunCallArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FunCallArgs) ReadField1(iprot thrift.TProtocol) error {
	p.ArgStruct = &ArgStruct{}
	if err := p.ArgStruct.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ArgStruct, err)
	}
	return nil
}

func (p *FunCallArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := int8(v)
		p.ArgByte = temp
	}
	return nil
}

func (p *FunCallArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ArgI16 = v
	}
	return nil
}

func (p *FunCallArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ArgI32 = v
	}
	return nil
}

func (p *FunCallArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ArgI64 = v
	}
	return nil
}

func (p *FunCallArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.ArgDouble = v
	}
	return nil
}

func (p *FunCallArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.ArgString = v
	}
	return nil
}

func (p *FunCallArgs) ReadField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.ParamMapStrStr = tMap
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key4 = v
		}
		var _val5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val5 = v
		}
		p.ParamMapStrStr[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *FunCallArgs) ReadField9(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[int32]string, size)
	p.ParamMapI32Str = tMap
	for i := 0; i < size; i++ {
		var _key6 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key6 = v
		}
		var _val7 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val7 = v
		}
		p.ParamMapI32Str[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *FunCallArgs) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[string]bool, size)
	p.ParamSetStr = tSet
	for i := 0; i < size; i++ {
		var _elem8 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem8 = v
		}
		p.ParamSetStr[_elem8] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *FunCallArgs) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[int64]bool, size)
	p.ParamSetI64 = tSet
	for i := 0; i < size; i++ {
		var _elem9 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem9 = v
		}
		p.ParamSetI64[_elem9] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *FunCallArgs) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ParamListStr = tSlice
	for i := 0; i < size; i++ {
		var _elem10 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem10 = v
		}
		p.ParamListStr = append(p.ParamListStr, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FunCallArgs) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.ArgBool = v
	}
	return nil
}

func (p *FunCallArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("funCall_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FunCallArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argStruct", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:argStruct: %s", p, err)
	}
	if err := p.ArgStruct.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ArgStruct, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:argStruct: %s", p, err)
	}
	return err
}

func (p *FunCallArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argByte", thrift.BYTE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:argByte: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.ArgByte)); err != nil {
		return fmt.Errorf("%T.argByte (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:argByte: %s", p, err)
	}
	return err
}

func (p *FunCallArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argI16", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:argI16: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.ArgI16)); err != nil {
		return fmt.Errorf("%T.argI16 (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:argI16: %s", p, err)
	}
	return err
}

func (p *FunCallArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argI32", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:argI32: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ArgI32)); err != nil {
		return fmt.Errorf("%T.argI32 (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:argI32: %s", p, err)
	}
	return err
}

func (p *FunCallArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argI64", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:argI64: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ArgI64)); err != nil {
		return fmt.Errorf("%T.argI64 (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:argI64: %s", p, err)
	}
	return err
}

func (p *FunCallArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argDouble", thrift.DOUBLE, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:argDouble: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.ArgDouble)); err != nil {
		return fmt.Errorf("%T.argDouble (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:argDouble: %s", p, err)
	}
	return err
}

func (p *FunCallArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argString", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:argString: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ArgString)); err != nil {
		return fmt.Errorf("%T.argString (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:argString: %s", p, err)
	}
	return err
}

func (p *FunCallArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paramMapStrStr", thrift.MAP, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:paramMapStrStr: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParamMapStrStr)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.ParamMapStrStr {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:paramMapStrStr: %s", p, err)
	}
	return err
}

func (p *FunCallArgs) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paramMapI32Str", thrift.MAP, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:paramMapI32Str: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.ParamMapI32Str)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.ParamMapI32Str {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:paramMapI32Str: %s", p, err)
	}
	return err
}

func (p *FunCallArgs) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paramSetStr", thrift.SET, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:paramSetStr: %s", p, err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.ParamSetStr)); err != nil {
		return fmt.Errorf("error writing set begin: %s", err)
	}
	for v, _ := range p.ParamSetStr {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return fmt.Errorf("error writing set end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:paramSetStr: %s", p, err)
	}
	return err
}

func (p *FunCallArgs) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paramSetI64", thrift.SET, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:paramSetI64: %s", p, err)
	}
	if err := oprot.WriteSetBegin(thrift.I64, len(p.ParamSetI64)); err != nil {
		return fmt.Errorf("error writing set begin: %s", err)
	}
	for v, _ := range p.ParamSetI64 {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return fmt.Errorf("error writing set end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:paramSetI64: %s", p, err)
	}
	return err
}

func (p *FunCallArgs) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paramListStr", thrift.LIST, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:paramListStr: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ParamListStr)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ParamListStr {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:paramListStr: %s", p, err)
	}
	return err
}

func (p *FunCallArgs) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argBool", thrift.BOOL, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:argBool: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.ArgBool)); err != nil {
		return fmt.Errorf("%T.argBool (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:argBool: %s", p, err)
	}
	return err
}

func (p *FunCallArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FunCallArgs(%+v)", *p)
}

type FunCallResult struct {
	Success []string `thrift:"success,0" json:"success"`
}

func NewFunCallResult() *FunCallResult {
	return &FunCallResult{}
}

var FunCallResult_Success_DEFAULT []string

func (p *FunCallResult) GetSuccess() []string {
	return p.Success
}
func (p *FunCallResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FunCallResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FunCallResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem11 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem11 = v
		}
		p.Success = append(p.Success, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FunCallResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("funCall_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FunCallResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FunCallResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FunCallResult(%+v)", *p)
}
